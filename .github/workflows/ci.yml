name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  backend-test:
    name: Backend Tests
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: easycart_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.21'
        
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-

    - name: Install dependencies
      working-directory: ./backend
      run: go mod download

    - name: Run tests
      working-directory: ./backend
      env:
        TEST_DB_HOST: localhost
        TEST_DB_PORT: 5432
        TEST_DB_USER: postgres
        TEST_DB_PASSWORD: postgres
        TEST_DB_NAME: easycart_test
      run: |
        go test -v -race -coverprofile=coverage.out ./internal/handlers/...
        go tool cover -html=coverage.out -o coverage.html

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: backend-coverage
        path: ./backend/coverage.html

  frontend-test:
    name: Frontend Tests
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run linting
      working-directory: ./frontend
      run: npm run lint

    - name: Run unit tests
      working-directory: ./frontend
      run: npm run test:coverage

    - name: Upload coverage reports
      uses: actions/upload-artifact@v3
      with:
        name: frontend-coverage
        path: ./frontend/coverage/

  e2e-test:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Start services
      run: |
        docker compose up -d --build
        docker compose ps

    - name: Wait for services
      run: |
        echo "Waiting for backend..."
        timeout 60 bash -c 'until curl -f http://localhost:8080/api/v1/health; do sleep 5; done'
        echo "Waiting for frontend..."
        timeout 60 bash -c 'until curl -f http://localhost:3000; do sleep 5; done'

    - name: Set up Node.js for Cypress
      uses: actions/setup-node@v4
      with:
        node-version: '20'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json

    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm ci

    - name: Run Cypress tests
      working-directory: ./frontend
      run: npx cypress run --headless
      env:
        CYPRESS_baseUrl: http://localhost:3000

    - name: Upload Cypress screenshots
      uses: actions/upload-artifact@v3
      if: failure()
      with:
        name: cypress-screenshots
        path: ./frontend/cypress/screenshots

    - name: Upload Cypress videos
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: cypress-videos
        path: ./frontend/cypress/videos

    - name: Stop services
      if: always()
      run: docker compose down

  build-images:
    name: Build Docker Images
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    strategy:
      matrix:
        component: [backend, frontend]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-${{ matrix.component }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./${{ matrix.component }}
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: [backend-test, frontend-test]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build-images, e2e-test, security-scan]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: staging
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        echo "Image tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "Image tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        # Add your deployment commands here
        # For example, update Docker Compose on staging server
        # ssh deploy@staging-server "cd /opt/easycart && docker compose pull && docker compose up -d"

    - name: Run health checks
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here
        # curl -f https://staging.easycart.com/api/v1/health

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        echo "Image tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-backend:latest"
        echo "Image tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}-frontend:latest"
        # Add your production deployment commands here

    - name: Run health checks
      run: |
        echo "Running post-deployment health checks..."
        # Add health check commands here
        # curl -f https://easycart.com/api/v1/health

    - name: Notify deployment
      run: |
        echo "ðŸš€ EasyCart has been deployed to production!"
        # Add notification logic (Slack, email, etc.)